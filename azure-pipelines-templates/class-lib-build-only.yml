# Copyright (c) .NET Foundation and Contributors
# Portions Copyright (c) Sankarsan Kampa (a.k.a. k3rn31p4nic).  All rights reserved.
# See LICENSE file in the project root for full license information.

parameters:
  skipNuGetRestore: false
  gitUser: 'nfbot'
  gitEmail: 'nanoframework@outlook.com'
  sonarCloudProject: 'dummy-key'
  nugetConfigPath: 'NuGet.config'
  runUnitTests: false
  unitTestRunsettings: 'DIDNT_GET_ONE_FROM_THE_CALLER'

steps:
# need this here in order to persist GitHub credentials 
- checkout: self
  submodules: true

- script: |
    git config --global user.email ${{ parameters.gitEmail }}
    git config --global user.name ${{ parameters.gitUser }}
    git config --global core.autocrlf true
  displayName: Setup git identity

# get commit message
- powershell: |

    if($env:System_PullRequest_PullRequestId -ne $null)
    {
        # PR build, get PR message
        Write-Host "Build from PR"

        # need to get PR number from branch as the Azure Pipeline var can't be trusted
        if($env:Build_SourceBranch -match '(?<=(pull\/))\w*(?=(\/))')
        {
            $prNumber = $matches[0]

            $prUrl = "https://api.github.com/repos/$env:Build_Repository_Name/pulls/$prNumber"

            $commit = Invoke-RestMethod -Uri $prUrl -ContentType "application/json" -Method GET

            $commitMessage = $commit.body
        }
    }
    else
    {
        # build NOT from PR
        Write-Host "Build NOT from PR, commit ID: $env:Build_SourceVersion"
 
         # need to wrap this in a try/catch because PR doesn't always exist
        try
        {
            # get PR associate with commit
            $prUrl = "https://api.github.com/repos/$env:Build_Repository_Name/commits/$env:Build_SourceVersion/pulls"
            $commit = Invoke-RestMethod -Uri $prUrl -ContentType "application/json" -Headers @{"Accept"="application/vnd.github.groot-preview+json"} -Method GET

            if($commit -ne $null)
            {
                # merged from a PR, check if changes were for unit tests only
                $labelsCount = [int]$commit.labels.count
                
                if($labelsCount -eq 1)
                {
                    $unitTestsLabel = $commit.labels | where {$_.Name -eq 'Type: Unit Tests'}
                    
                    if($unitTestsLabel -ne $null)
                    {
                        # Unit Test work only, skip build
                        echo "##vso[task.setvariable variable=SKIP_BUILD;isOutput=true]true"
            
                        Write-Host "Unit Tests changes only, skipping build."
                        
                        # done here
                        Return
                    }
                }
            }
        }
        catch
        {}

        # get subject and commit message for commit
        $commitMessage = git log --format='%B' -1
    }

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage -replace "`r`n", " "

    # set variable to foward to jobs
    echo "##vso[task.setvariable variable=COMMIT_MESSAGE;isOutput=true]$commitMessage"
  name: getCommitDetails
  displayName: Grab build details

- template: install-nbgv-tool.yml

- template: prepare-release.yml

- task: SonarCloudPrepare@1
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'sonarcloud-$(System.TeamProject)'
    organization: 'nanoframework'
    scannerMode: 'MSBuild'
    projectKey: '${{ parameters.sonarCloudProject }}'
    extraProperties: |
     sonar.exclusions=**/obj/**,**/*.dll
     sonar.cs.vscoveragexml.reportsPaths=$(Agent.TempDirectory)/**/**.coverage
     sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/**/**.trx

- task: InstallnFBuildComponents@1
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Install nanoFramework MSBuild components

- template: install-nuget.yml

- task: NuGetCommand@2
  condition: and( succeeded(), not( ${{ parameters.skipNuGetRestore }} ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: NuGet restore
  inputs:
    restoreSolution: '**/*.sln'
    feedsToUse: config
    nugetConfigPath: ${{ parameters.nugetConfigPath }}

- task: VSBuild@1
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    msbuildArgs: '/p:PublicRelease=true'
    configuration: '$(buildConfiguration)'

- task: VisualStudioTestPlatformInstaller@1
  condition: and( succeeded(), ${{ parameters.runUnitTests }}, ne( variables['StartReleaseCandidate'], true ) )
  displayName: 'Visual Studio Test Platform Installer'
  inputs:
    versionSelector: latestStable

- task: VSTest@2
  condition: and( succeeded(), ${{ parameters.runUnitTests }}, ne( variables['StartReleaseCandidate'], true ) )
  displayName: 'Running Unit Tests'
  continueOnError: true
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\NFUnitTest.dll
      **\*Tests*.dll
      !**\obj\**
      !**\TestAdapter\**
      !**\NFUnitTest_DummyAdapter\**
      !**\nanoFramework.TestFramework\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    diagnosticsEnabled: true
    vsTestVersion: toolsInstaller
    codeCoverageEnabled: true
    runSettingsFile: '${{ parameters.unitTestRunsettings }}'

- task: PowerShell@2
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Get AssemblyNativeVersion version
  inputs:
    targetType: 'inline'
    script: |

      $assemblyInfoFiles = (Get-ChildItem -Path ".\*" -Include "AssemblyInfo.cs" -Recurse)

      $attributeRegex = [regex]::new('("AssemblyNativeVersion\(")|(\d+\.\d+\.\d+\.\d+)|(""\))')

      # read attribute from file
      $fileContent = Get-Content($assemblyInfoFiles[0])

      $attrib = $attributeRegex.Match($fileContent) 

      $nativeVersion = $attrib.Groups[2].value

      Write-Host "AssemblyNativeVersion is $nativeVersion"

      Write-Host "$("##vso[task.setvariable variable=ASSEMBLY_NATIVE_VERSION]")$nativeVersion"

- powershell: |
    # get subject and commit message for commit
    $commitMessage = git log --format='%B' -1

    # need to flatten message by removing new lines
    $commitMessage = $commitMessage -replace "`r`n", " "

    if($commitMessage -like "*PUBLISH_RELEASE*")
    {
        # set variable
        Write-Host "$("##vso[task.setvariable variable=RELEASE_DRAFT;isOutput=true]")false"
        Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")true"
        Write-Host "Release draft: FALSE"
    }
    else
    {
        # set variable
        Write-Host "$("##vso[task.setvariable variable=RELEASE_DRAFT;isOutput=true]")true"
        Write-Host "$("##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]")false"
        Write-Host "Release draft: TRUE"
    }
  name: SetReleaseDraftVar
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Set release draft var

- task: SonarCloudAnalyze@1
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: 'Run Code Analysis'

- task: SonarCloudPublish@1
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: 'Publish Quality Gate Result'
  inputs:
    pollingTimeoutSec: '300'

- task: UseRubyVersion@0
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Setup Ruby
  inputs:
    versionSpec: '= 2.7' 
    addToPath: true

# generate change log
- powershell: |
    gem install github_changelog_generator --quiet --no-document
    # need to call it passing both cache options with full path otherwise it won't work
    github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache --pr-wo-labels
  condition: and( succeeded(), variables['SetReleaseDraftVar.RELEASE_DRAFT'], eq(variables['System.PullRequest.PullRequestId'], ''), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( startsWith(variables['Build.SourceBranchName'], 'master') ), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Generate change log
  continueOnError: true

# generate change log including future version
- powershell: |
    gem install github_changelog_generator --quiet --no-document
    # need to call it passing both cache options with full path otherwise it won't work
    github_changelog_generator --token $(GitHubToken) --cache-log  $env:AGENT_TEMPDIRECTORY\github-changelog-logger.log --cache-file $env:AGENT_TEMPDIRECTORY\github-changelog-http-cache --pr-wo-labels --future-release v$env:MY_NUGET_VERSION
  condition: and( succeeded(), or( eq ( variables['SetReleaseDraftVar.RELEASE_VERSION'], 'True' ), and ( eq(variables['System.PullRequest.PullRequestId'], ''), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), startsWith(variables['Build.SourceBranchName'], 'master'), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ) ) ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Generate change log
  continueOnError: true

# copy change log to artifacts directory
- task: CopyFiles@2
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Copy Changelog
  continueOnError: true
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: 'CHANGELOG.md'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

# push new changelog to GitHub repo
- task: PowerShell@2
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), not( contains(variables['Build.SourceBranchName'], 'update-dependencies') ), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Push changelog to GitHub
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      git add CHANGELOG.md
      git commit -m "Update CHANGELOG for v$(NBGV_Version)" -m"***NO_CI***"

      git config user.email ${{ parameters.gitEmail }}
      git config user.name ${{ parameters.gitUser }}
      
      # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
      # 'encoded token' is the Base64 of the string "nfbot:personal-token"
      $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"

      git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"

- task: CopyFiles@1
  condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
  displayName: Collecting deployable artifacts
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    Contents: |
      **\CHANGELOG.md
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true
